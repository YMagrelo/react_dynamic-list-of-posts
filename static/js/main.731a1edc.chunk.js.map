{"version":3,"sources":["api.ts","components/Person.tsx","components/Comment.tsx","components/CommentList.tsx","components/Post.tsx","components/PostList.tsx","App.tsx","index.tsx"],"names":["getData","url","a","fetch","response","json","getPostsWithUsersComments","posts","users","commentsPost","map","post","user","find","person","id","userId","comments","filter","message","postId","Person","className","name","email","address","street","suite","city","zipcode","Comment","body","CommentList","commentsToPost","comment","key","Post","title","PostList","App","useState","setPosts","originalPosts","setOriginalPosts","isLoading","setLoading","query","setQuery","loadPosts","postsFromServer","useMemo","toLowerCase","includes","length","type","onClick","disabled","onSubmit","event","preventDefault","placeholder","onChange","target","value","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.731a1edc.chunk.js","sourcesContent":["import {\n  Post, User, Comments, PreparedPosts,\n} from './interfaces';\n\nconst BASE_URL = 'https://jsonplaceholder.typicode.com';\nconst POSTS_URL = '/posts';\nconst USERS_URL = '/users';\nconst COMMENTS_URL = '/comments';\n\nconst getData = async <T>(url: string): Promise<T> => {\n  const response = await fetch(`${BASE_URL}${url}`);\n\n  return response.json();\n};\n\nconst getPosts = (): Promise<Post[]> => {\n  return getData<Post[]>(POSTS_URL);\n};\n\nconst getUsers = (): Promise<User[]> => {\n  return getData<User[]>(USERS_URL);\n};\n\nconst getComments = (): Promise<Comments[]> => {\n  return getData<Comments[]>(COMMENTS_URL);\n};\n\nexport const getPostsWithUsersComments = async (): Promise<PreparedPosts[]> => {\n  const posts: Post[] = await getPosts();\n  const users: User[] = await getUsers();\n  const commentsPost: Comments[] = await getComments();\n\n  return posts.map(post => {\n    const user = users.find(person => person.id === post.userId) as User;\n    const comments = commentsPost\n      .filter(message => message.postId === post.userId) as Comments[];\n\n    return {\n      ...post,\n      user,\n      comments,\n    };\n  });\n};\n","import React, { FC } from 'react';\nimport { User } from '../interfaces';\n\ninterface Props {\n  user: User;\n}\n\n\nexport const Person: FC<Props> = ({ user }) => (\n  <>\n    <div className=\"person\">\n      <h3>{user.name}</h3>\n      <p>{user.email}</p>\n      <ul className=\"person__address-list\">\n        <li>{user.address.street}</li>\n        <li>{user.address.suite}</li>\n        <li>{user.address.city}</li>\n        <li>{user.address.zipcode}</li>\n      </ul>\n    </div>\n  </>\n);\n","import React, { FC } from 'react';\n\ninterface Props {\n  name: string;\n  body: string;\n  email: string;\n}\n\nexport const Comment: FC<Props> = ({ name, body, email }) => (\n  <div className=\"comment\">\n    <h4>{name}</h4>\n    <p>{body}</p>\n    <p className=\"comment__email\">{email}</p>\n  </div>\n);\n","import React, { FC } from 'react';\nimport { Comments } from '../interfaces';\nimport { Comment } from './Comment';\n\ninterface Props {\n  commentsToPost: Comments[];\n}\n\nexport const CommentList: FC<Props> = ({ commentsToPost }) => (\n\n  <>\n    {commentsToPost.map(comment => (\n      <Comment\n        key={comment.id}\n        name={comment.name}\n        body={comment.body}\n        email={comment.email}\n      />\n    ))}\n  </>\n);\n","import React, { FC } from 'react';\nimport { Comments, User } from '../interfaces';\nimport { Person } from './Person';\nimport { CommentList } from './CommentList';\n\ninterface Props {\n  title: string;\n  body: string;\n  comments: Comments[];\n  user: User;\n}\n\n\nexport const Post: FC<Props> = ({\n  title, body, user, comments,\n}) => (\n  <>\n    <h2 className=\"post__title\">{title}</h2>\n    <p className=\"post__body\">{body}</p>\n    <Person user={user} />\n    <h3>Comments</h3>\n    <CommentList commentsToPost={comments} />\n  </>\n);\n","import React, { FC } from 'react';\nimport { PreparedPosts } from '../interfaces';\nimport { Post } from './Post';\n\ninterface Props {\n  posts: PreparedPosts[];\n}\n\nexport const PostList: FC<Props> = ({ posts }) => {\n  return (\n    <>\n      <ul className=\"posts\">\n        {posts.map(post => (\n          <li key={post.id} className=\"post\">\n            <Post\n              title={post.title}\n              body={post.body}\n              user={post.user}\n              comments={post.comments}\n            />\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React, {\n  FC, useState, ChangeEvent, useMemo, FormEvent,\n} from 'react';\nimport './App.scss';\nimport { PreparedPosts } from './interfaces';\nimport { getPostsWithUsersComments } from './api';\nimport { PostList } from './components/PostList';\n\nconst App: FC = () => {\n  const [posts, setPosts] = useState<PreparedPosts[]>([]);\n  const [originalPosts, setOriginalPosts] = useState<PreparedPosts[]>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [query, setQuery] = useState('');\n\n  const loadPosts = async () => {\n    setLoading(true);\n    const postsFromServer = await getPostsWithUsersComments();\n\n    setPosts(postsFromServer);\n    setOriginalPosts(postsFromServer);\n  };\n\n  const handleInput = (event: ChangeEvent<HTMLInputElement>) => {\n    const { target } = event;\n\n    setQuery(target.value.toLowerCase());\n  };\n\n  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setQuery('');\n  };\n\n  useMemo(() => {\n    setPosts(originalPosts\n      .filter(post => post.title.toLowerCase().includes(query)\n        || post.body.toLowerCase().includes(query)));\n  }, [query]);\n\n\n  return (\n    <div className=\"app\">\n      <h1 className=\"app__heading\">Dynamic list of posts</h1>\n      {(originalPosts.length === 0)\n        ? (\n          <>\n            <button\n              type=\"button\"\n              onClick={loadPosts}\n              disabled={isLoading}\n              className=\"button is-primary is-light app__button\"\n            >\n          Load posts\n            </button>\n            {isLoading && (\n              <p>Loading...</p>\n            )}\n          </>\n        )\n        : (\n          <>\n            <form onSubmit={handleSubmit}>\n              <input\n                className=\"app__input input is-primary\"\n                placeholder=\"Type search word\"\n                onChange={handleInput}\n                type=\"text\"\n                value={query}\n              />\n            </form>\n            <PostList posts={posts} />\n          </>\n        )}\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}